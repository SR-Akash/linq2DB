/*








//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : skinintel
	/// Data Source    : tcp://localhost:5432
	/// Server Version : 14.1
	/// </summary>
	public partial class SkinintelDB : LinqToDB.Data.DataConnection
	{
		public ITable<ClientConfiguration>               ClientConfigurations               { get { return this.GetTable<ClientConfiguration>(); } }
		public ITable<ClientConfigurationDetail>         ClientConfigurationDetails         { get { return this.GetTable<ClientConfigurationDetail>(); } }
		public ITable<DeviceOption>                      DeviceOptions                      { get { return this.GetTable<DeviceOption>(); } }
		public ITable<Font>                              Fonts                              { get { return this.GetTable<Font>(); } }
		public ITable<FontOption>                        FontOptions                        { get { return this.GetTable<FontOption>(); } }
		public ITable<FontType>                          FontTypes                          { get { return this.GetTable<FontType>(); } }
		public ITable<GenderOption>                      GenderOptions                      { get { return this.GetTable<GenderOption>(); } }
		public ITable<HomePageImage>                     HomePageImages                     { get { return this.GetTable<HomePageImage>(); } }
		public ITable<HomePageImageOption>               HomePageImageOptions               { get { return this.GetTable<HomePageImageOption>(); } }
		public ITable<ImageType>                         ImageTypes                         { get { return this.GetTable<ImageType>(); } }
		public ITable<PhotoInstruction>                  PhotoInstructions                  { get { return this.GetTable<PhotoInstruction>(); } }
		public ITable<PhotoInstructionOption>            PhotoInstructionOptions            { get { return this.GetTable<PhotoInstructionOption>(); } }
		public ITable<PrioritizationOption>              PrioritizationOptions              { get { return this.GetTable<PrioritizationOption>(); } }
		public ITable<ProductRecommendationEngineOption> ProductRecommendationEngineOptions { get { return this.GetTable<ProductRecommendationEngineOption>(); } }
		public ITable<ResultsLayoutOption>               ResultsLayoutOptions               { get { return this.GetTable<ResultsLayoutOption>(); } }
		public ITable<ResultsOutputOption>               ResultsOutputOptions               { get { return this.GetTable<ResultsOutputOption>(); } }
		public ITable<SkinConcern>                       SkinConcerns                       { get { return this.GetTable<SkinConcern>(); } }
		public ITable<SkinCondition>                     SkinConditions                     { get { return this.GetTable<SkinCondition>(); } }
		public ITable<SkinType>                          SkinTypes                          { get { return this.GetTable<SkinType>(); } }
		public ITable<SunExposureOption>                 SunExposureOptions                 { get { return this.GetTable<SunExposureOption>(); } }

		partial void InitMappingSchema()
		{
		}

		public SkinintelDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public SkinintelDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public SkinintelDB(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public SkinintelDB(LinqToDbConnectionOptions<SkinintelDB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="public", Name="ClientConfiguration")]
	public partial class ClientConfiguration
	{
		[PrimaryKey, Identity] public int       Id                            { get; set; } // integer
		[Column,     Nullable] public string    LogoUrl                       { get; set; } // text
		[Column,     Nullable] public string    PrimaryColor                  { get; set; } // text
		[Column,     Nullable] public string    SecondaryColor                { get; set; } // text
		[Column,     Nullable] public string    BackgroundUrl                 { get; set; } // text
		[Column,     Nullable] public bool?     UseDefaultTermsAndCondition   { get; set; } // boolean
		[Column,     Nullable] public string    TermsAndCondition             { get; set; } // text
		[Column,     Nullable] public int?      HomePageImageOptionId         { get; set; } // integer
		[Column,     Nullable] public int?      PhotoInstructionOptionId      { get; set; } // integer
		[Column,     Nullable] public int?      ImageTypeId                   { get; set; } // integer
		[Column,     Nullable] public int?      ResultsLayoutId               { get; set; } // integer
		[Column,     Nullable] public int?      ProductRecommendationEngineId { get; set; } // integer
		[Column,     Nullable] public int?      PrioritizationOptionId        { get; set; } // integer
		[Column,     Nullable] public int?      TenantId                      { get; set; } // integer
		[Column,     Nullable] public int?      CreatedByClient               { get; set; } // integer
		[Column,     Nullable] public int?      CreatedBy                     { get; set; } // integer
		[Column,     Nullable] public DateTime? CreatedAt                     { get; set; } // date
		[Column,     Nullable] public int?      UpdatedByClient               { get; set; } // integer
		[Column,     Nullable] public int?      UpdatedBy                     { get; set; } // integer
		[Column,     Nullable] public DateTime? UpdatedAt                     { get; set; } // date

		#region Associations

		/// <summary>
		/// ClientConfiguration_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfigurationDetail> ClientConfigurationDetails { get; set; }

		/// <summary>
		/// Font_ClientConfiguration_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Font> Fonts { get; set; }

		/// <summary>
		/// HomePageImageOption
		/// </summary>
		[Association(ThisKey="HomePageImageOptionId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="HomePageImageOption", BackReferenceName="ClientConfigurations")]
		public HomePageImageOption HomePageImageOption { get; set; }

		/// <summary>
		/// ClientConfiguration_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<HomePageImage> HomePageImages { get; set; }

		/// <summary>
		/// ImageType
		/// </summary>
		[Association(ThisKey="ImageTypeId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ImageType", BackReferenceName="ClientConfigurations")]
		public ImageType ImageType { get; set; }

		/// <summary>
		/// PhotoInstructionOption
		/// </summary>
		[Association(ThisKey="PhotoInstructionOptionId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="PhotoInstructionOption", BackReferenceName="ClientConfigurations")]
		public PhotoInstructionOption PhotoInstructionOption { get; set; }

		/// <summary>
		/// ClientConfiguration_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PhotoInstruction> PhotoInstructions { get; set; }

		/// <summary>
		/// PrioritizationOption
		/// </summary>
		[Association(ThisKey="PrioritizationOptionId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="PrioritizationOption", BackReferenceName="ClientConfigurations")]
		public PrioritizationOption PrioritizationOption { get; set; }

		/// <summary>
		/// ProductRecommendationEngine
		/// </summary>
		[Association(ThisKey="ProductRecommendationEngineId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ProductRecommendationEngine", BackReferenceName="ProductRecommendationEngines")]
		public ProductRecommendationEngineOption ProductRecommendationEngine { get; set; }

		/// <summary>
		/// ResultsLayout
		/// </summary>
		[Association(ThisKey="ResultsLayoutId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ResultsLayout", BackReferenceName="ResultsLayouts")]
		public ResultsLayoutOption ResultsLayout { get; set; }

		/// <summary>
		/// ClientConfiguration_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SkinType> SkinTypes { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ClientConfigurationDetails")]
	public partial class ClientConfigurationDetail
	{
		[Identity               ] public int    Id       { get; set; } // integer
		[Column,        Nullable] public int?   ClientId { get; set; } // integer
		[Column,        Nullable] public string Type     { get; set; } // text
		[PrimaryKey, NotNull    ] public int    TypeId   { get; set; } // integer

		#region Associations

		/// <summary>
		/// ClientConfiguration
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ClientConfiguration", BackReferenceName="ClientConfigurationDetails")]
		public ClientConfiguration Client { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="DeviceOption")]
	public partial class DeviceOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="Font")]
	public partial class Font
	{
		[PrimaryKey, Identity] public int    FontId     { get; set; } // integer
		[Column,     Nullable] public int?   FontTypeId { get; set; } // integer
		[Column,     Nullable] public int?   Size       { get; set; } // integer
		[Column,     Nullable] public bool?  IsBold     { get; set; } // boolean
		[Column,     Nullable] public bool?  IsItalic   { get; set; } // boolean
		[Column,     Nullable] public string Color      { get; set; } // text
		[Column,     Nullable] public int?   ClientId   { get; set; } // integer

		#region Associations

		/// <summary>
		/// Font_ClientConfiguration
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="Font_ClientConfiguration", BackReferenceName="Fonts")]
		public ClientConfiguration Client { get; set; }

		/// <summary>
		/// Font_FontType
		/// </summary>
		[Association(ThisKey="FontTypeId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="Font_FontType", BackReferenceName="Fonts")]
		public FontType FontType { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="FontOption")]
	public partial class FontOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="FontType")]
	public partial class FontType
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer

		#region Associations

		/// <summary>
		/// Font_FontType_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="FontTypeId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Font> Fonts { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="GenderOption")]
	public partial class GenderOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="HomePageImage")]
	public partial class HomePageImage
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string ImageUrl { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
		[Column,     Nullable] public int?   ClientId { get; set; } // integer

		#region Associations

		/// <summary>
		/// ClientConfiguration
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ClientConfiguration", BackReferenceName="HomePageImages")]
		public ClientConfiguration Client { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="HomePageImageOption")]
	public partial class HomePageImageOption
	{
		[PrimaryKey, Identity] public int    Id    { get; set; } // integer
		[Column,     Nullable] public string Name  { get; set; } // text
		[Column,     Nullable] public int?   Value { get; set; } // integer

		#region Associations

		/// <summary>
		/// HomePageImageOption_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="HomePageImageOptionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ClientConfigurations { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ImageType")]
	public partial class ImageType
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer

		#region Associations

		/// <summary>
		/// ImageType_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ImageTypeId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ClientConfigurations { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="PhotoInstruction")]
	public partial class PhotoInstruction
	{
		[PrimaryKey, Identity] public int    Id          { get; set; } // integer
		[Column,     Nullable] public string ImageUrl    { get; set; } // text
		[Column,     Nullable] public string Instruction { get; set; } // text
		[Column,     Nullable] public int?   Sequence    { get; set; } // integer
		[Column,     Nullable] public int?   ClientId    { get; set; } // integer

		#region Associations

		/// <summary>
		/// ClientConfiguration
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ClientConfiguration", BackReferenceName="PhotoInstructions")]
		public ClientConfiguration Client { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="PhotoInstructionOption")]
	public partial class PhotoInstructionOption
	{
		[PrimaryKey, Identity] public int    Id    { get; set; } // integer
		[Column,     Nullable] public string Name  { get; set; } // text
		[Column,     Nullable] public int?   Value { get; set; } // integer

		#region Associations

		/// <summary>
		/// PhotoInstructionOption_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PhotoInstructionOptionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ClientConfigurations { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="PrioritizationOption")]
	public partial class PrioritizationOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer

		#region Associations

		/// <summary>
		/// PrioritizationOption_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PrioritizationOptionId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ClientConfigurations { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ProductRecommendationEngineOption")]
	public partial class ProductRecommendationEngineOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer

		#region Associations

		/// <summary>
		/// ProductRecommendationEngine_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProductRecommendationEngineId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ProductRecommendationEngines { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ResultsLayoutOption")]
	public partial class ResultsLayoutOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer

		#region Associations

		/// <summary>
		/// ResultsLayout_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ResultsLayoutId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ClientConfiguration> ResultsLayouts { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ResultsOutputOption")]
	public partial class ResultsOutputOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="SkinConcern")]
	public partial class SkinConcern
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="SkinCondition")]
	public partial class SkinCondition
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	[Table(Schema="public", Name="SkinType")]
	public partial class SkinType
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public string ImageUrl { get; set; } // text
		[Column,     Nullable] public string Title    { get; set; } // text
		[Column,     Nullable] public string Notes    { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
		[Column,     Nullable] public int?   ClientId { get; set; } // integer

		#region Associations

		/// <summary>
		/// ClientConfiguration
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ClientConfiguration", BackReferenceName="SkinTypes")]
		public ClientConfiguration Client { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="SunExposureOption")]
	public partial class SunExposureOption
	{
		[PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column,     Nullable] public string Name     { get; set; } // text
		[Column,     Nullable] public int?   Sequence { get; set; } // integer
	}

	public static partial class TableExtensions
	{
		public static ClientConfiguration Find(this ITable<ClientConfiguration> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ClientConfigurationDetail Find(this ITable<ClientConfigurationDetail> table, int TypeId)
		{
			return table.FirstOrDefault(t =>
				t.TypeId == TypeId);
		}

		public static DeviceOption Find(this ITable<DeviceOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Font Find(this ITable<Font> table, int FontId)
		{
			return table.FirstOrDefault(t =>
				t.FontId == FontId);
		}

		public static FontOption Find(this ITable<FontOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static FontType Find(this ITable<FontType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GenderOption Find(this ITable<GenderOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static HomePageImage Find(this ITable<HomePageImage> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static HomePageImageOption Find(this ITable<HomePageImageOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ImageType Find(this ITable<ImageType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PhotoInstruction Find(this ITable<PhotoInstruction> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PhotoInstructionOption Find(this ITable<PhotoInstructionOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PrioritizationOption Find(this ITable<PrioritizationOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProductRecommendationEngineOption Find(this ITable<ProductRecommendationEngineOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ResultsLayoutOption Find(this ITable<ResultsLayoutOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ResultsOutputOption Find(this ITable<ResultsOutputOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SkinConcern Find(this ITable<SkinConcern> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SkinCondition Find(this ITable<SkinCondition> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SkinType Find(this ITable<SkinType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SunExposureOption Find(this ITable<SunExposureOption> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
*/

