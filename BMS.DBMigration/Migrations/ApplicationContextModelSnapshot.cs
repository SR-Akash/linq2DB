// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using BMS.DBMigration;

namespace BMS.DBMigration.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("security")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BMS.Entity.Configuration.ClientConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackgroundUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<int?>("HomePageImageOptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoInstructionOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text");

                    b.Property<int?>("PrioritizationOptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductRecommendationEngineId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResultsLayoutId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.Property<bool?>("UseDefaultTermsAndCondition")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("HomePageImageOptionId");

                    b.HasIndex("ImageTypeId");

                    b.HasIndex("PhotoInstructionOptionId");

                    b.HasIndex("PrioritizationOptionId");

                    b.HasIndex("ProductRecommendationEngineId");

                    b.HasIndex("ResultsLayoutId");

                    b.ToTable("ClientConfiguration", "Configuration");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ClientConfigurationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientConfigurationDetails", "Configuration");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.DeviceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DeviceOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mobile",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "iPad",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Laptop",
                            Sequence = 3
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.Font", b =>
                {
                    b.Property<int>("FontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("FontTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.HasKey("FontId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FontTypeId");

                    b.ToTable("Font", "Configuration");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.FontOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FontOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Montserrat Bold",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Montserrat SemiBold",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Montserrat Regular",
                            Sequence = 3
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.FontType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FontType", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Heading",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Heading",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Subheading",
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.GenderOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GenderOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Include Gender question in survey",
                            Sequence = 1
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.HomePageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("HomePageImage", "Configuration");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.HomePageImageOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HomePageImageOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1 Photo",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "2 Photo",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "3 Photo",
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "4 Photo",
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "5 Photo",
                            Value = 5
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ImageType", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Frontal",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Frontal/ Left Oblique/ Right Oblique",
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PhotoInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PhotoInstruction", "Configuration");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PhotoInstructionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PhotoInstructionOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1 Step",
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "2 Step",
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "3 Step",
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "4 Step",
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "5 Step",
                            Value = 5
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PrioritizationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PrioritizationOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Require customers to rank all concerns",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Require customers to select top 3 concerns",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Require customers to categorize concerns as Low/Medium/High",
                            Sequence = 3
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ProductRecommendationEngineOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductRecommendationEngineOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "On",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Off",
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ResultsLayoutOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ResultsLayoutOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Show all conditions on the same page",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toggle between photo results",
                            Sequence = 2
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ResultsOutputOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ResultsOutputOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Save to PDF",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Export to CRM",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Export to EHR",
                            Sequence = 3
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.SkinConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SkinConcern", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acne/Blemishes/Oiliness",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Under Eye Circles/Puffiness",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Loss of Volume / Skin Sagging",
                            Sequence = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pigmentation/Uneven Skin Tone",
                            Sequence = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dullness",
                            Sequence = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Crow’s Feet",
                            Sequence = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dryness",
                            Sequence = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pore Size",
                            Sequence = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Texture",
                            Sequence = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fine Lines & Wrinkles",
                            Sequence = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sensitivity/Redness",
                            Sequence = 11
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.SkinCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SkinCondition", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acne",
                            Sequence = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Wrinkles",
                            Sequence = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pigmentation",
                            Sequence = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Under Eye Circles",
                            Sequence = 4
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.SkinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("SkinType", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "",
                            Name = "Normal",
                            Notes = "‘Normal’ is a term widely used to refer to well-balanced skin.",
                            Sequence = 1,
                            Title = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "",
                            Name = "Oily",
                            Notes = "Associated with overproduction of oil or sebum",
                            Sequence = 2,
                            Title = "Oily"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "",
                            Name = "Dry",
                            Notes = "Produces less sebum than normal skin.  Can appear dull or lifeless due to loss of moisture",
                            Sequence = 3,
                            Title = "Dry"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "",
                            Name = "Combination",
                            Notes = "Oily forehead, nose, and chin and relatively dry cheeks",
                            Sequence = 4,
                            Title = "Combination"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "",
                            Name = "Sensitive",
                            Notes = "Sensitive skin is easily irritated",
                            Sequence = 5,
                            Title = "Sensitive"
                        });
                });

            modelBuilder.Entity("BMS.Entity.Configuration.SunExposureOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SunExposureOption", "Configuration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Include Sun Exposure question in survey",
                            Sequence = 1
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationAuthorization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AllowedEndPoints")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("AllowedIps")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ClientRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<int?>("ClientTenantId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<long?>("HourlyRequestLimit")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAuthorizationRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredUserCredential")
                        .HasColumnType("boolean");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClientId = "MASTER_CLIENT",
                            ClientRoleId = 1,
                            ClientSecret = "AQAAAAEAACcQAAAAEHlgdSPOPiWHPohwR5mqo+51bkn1cQUkf07HBzhTSIykTq6mpeoSF59Hlx4jGutd3A==",
                            ClientStatus = "Active",
                            ClientTenantId = 1,
                            ClientType = 0,
                            ConcurrencyToken = "3e37cec0-6dd8-4023-be89-dcdd01789b4b",
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 4, DateTimeKind.Utc).AddTicks(6287),
                            CreatedBy = 0,
                            DisplayName = "MASTER_CLIENT",
                            IsAuthorizationRequired = false,
                            IsRequiredUserCredential = false,
                            Permissions = "[\"ept:token\",\"gt:client_credentials\",\"gt:password\",\"gt:refresh_token\"]"
                        },
                        new
                        {
                            Id = 2L,
                            ClientId = "WEB_CLIENT",
                            ClientRoleId = 0,
                            ClientSecret = "AQAAAAEAACcQAAAAECATAnattR4ZOwUehNYFkYPErwgOday8FjG8IgNy6/xJcXL2Hviy9cTZ9m5KzAKVuw==",
                            ClientStatus = "Active",
                            ClientTenantId = 1,
                            ClientType = 0,
                            ConcurrencyToken = "99659ca4-f7fd-438a-acf6-bc1c20ec7774",
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 12, DateTimeKind.Utc).AddTicks(7597),
                            CreatedBy = 0,
                            DisplayName = "WEB_CLIENT",
                            IsAuthorizationRequired = true,
                            IsRequiredUserCredential = true,
                            Permissions = "[\"ept:token\",\"gt:client_credentials\",\"gt:password\",\"gt:refresh_token\"]"
                        },
                        new
                        {
                            Id = 3L,
                            ClientId = "APP_CLIENT",
                            ClientRoleId = 0,
                            ClientSecret = "AQAAAAEAACcQAAAAEPowzHIejHkH+/84qdmpJ+AEtlxcBPO9WWCzJ3gcUogmczti+yx5fkzJhdQ6dCg/3Q==",
                            ClientStatus = "Active",
                            ClientTenantId = 1,
                            ClientType = 0,
                            ConcurrencyToken = "2c5164ee-0c29-4e6e-9187-a13c5126d5be",
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 20, DateTimeKind.Utc).AddTicks(5507),
                            CreatedBy = 0,
                            DisplayName = "APP_CLIENT",
                            IsAuthorizationRequired = true,
                            IsRequiredUserCredential = true,
                            Permissions = "[\"ept:token\",\"gt:client_credentials\",\"gt:password\",\"gt:refresh_token\"]"
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationScope", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("BMS.Entity.Security.ClientRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsSystemRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Status")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ClientRoles", "security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 42, 907, DateTimeKind.Utc).AddTicks(6912),
                            Description = "Master Client",
                            IsSystemRequired = true,
                            Name = "Master Client",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 42, 907, DateTimeKind.Utc).AddTicks(7267),
                            Description = "Web Client",
                            IsSystemRequired = true,
                            Name = "Web Client",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 42, 907, DateTimeKind.Utc).AddTicks(7272),
                            Description = "App Client",
                            IsSystemRequired = true,
                            Name = "App Client",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSystemRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Status")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 20, DateTimeKind.Utc).AddTicks(9040),
                            Description = "System Admin",
                            Grade = 0,
                            IsSystemRequired = true,
                            Name = "System Admin",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 20, DateTimeKind.Utc).AddTicks(9401),
                            Description = "Tenant Admin",
                            Grade = 0,
                            IsSystemRequired = true,
                            Name = "Tenant Admin",
                            Status = "Active",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 20, DateTimeKind.Utc).AddTicks(9721),
                            Description = "Company Admin",
                            Grade = 0,
                            IsSystemRequired = true,
                            Name = "Company Admin",
                            Status = "Active",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 20, DateTimeKind.Utc).AddTicks(9725),
                            Description = "Customer",
                            Grade = 0,
                            IsSystemRequired = true,
                            Name = "Customer",
                            Status = "Active",
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tenants", "security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 42, 906, DateTimeKind.Utc).AddTicks(3321),
                            Description = "SkinIntel Tenant",
                            IsTrial = false,
                            Name = "SkinIntel",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 42, 906, DateTimeKind.Utc).AddTicks(3696),
                            Description = "ABC Tenant",
                            IsTrial = false,
                            Name = "ABC",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountType")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<DateTime?>("AccountVerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BannerImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Gender")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsCompanyAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenantAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("MobileVerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ReferralCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ReferrerId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer");

                    b.Property<int?>("SocialAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.Property<string>("Tag")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserType")
                        .HasMaxLength(56)
                        .HasColumnType("character varying(56)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", "security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 29, DateTimeKind.Utc).AddTicks(4445),
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 29, DateTimeKind.Utc).AddTicks(5836),
                            Email = "systemadmin@example.com",
                            EmailVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 29, DateTimeKind.Utc).AddTicks(3568),
                            FirstName = "System",
                            FullName = "System Admin",
                            IsCompanyAdmin = true,
                            IsSystemAdmin = true,
                            IsTenantAdmin = true,
                            IsVerified = false,
                            LastName = "Admin",
                            Password = "AQAAAAEAACcQAAAAEEt6URzrAzdSLUf6MfCONnwTGveCCzF2213pJ2siykbQ7+1es2m3wY4FwDC6ka+f1w==",
                            RoleId = 1,
                            Status = "Active",
                            UserName = "systemadmin@example.com",
                            UserType = "BackOffice"
                        },
                        new
                        {
                            Id = 2,
                            AccountVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 37, DateTimeKind.Utc).AddTicks(5689),
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 37, DateTimeKind.Utc).AddTicks(5701),
                            Email = "tenantadmin@example.com",
                            EmailVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 37, DateTimeKind.Utc).AddTicks(5678),
                            FirstName = "Tenant",
                            FullName = "Tenant Admin",
                            IsCompanyAdmin = true,
                            IsSystemAdmin = false,
                            IsTenantAdmin = true,
                            IsVerified = false,
                            LastName = "Admin",
                            Password = "AQAAAAEAACcQAAAAEPfx+yPwU6yASxR0blMZaaqaLZ09VkwkZ7AdwrSiT+EGPwz/2CE3gJ9KvvRO9RJLsw==",
                            RoleId = 2,
                            Status = "Active",
                            TenantId = 1,
                            UserName = "tenantadmin@example.com",
                            UserType = "BackOffice"
                        },
                        new
                        {
                            Id = 3,
                            AccountVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 45, DateTimeKind.Utc).AddTicks(4682),
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 45, DateTimeKind.Utc).AddTicks(4689),
                            Email = "companyadmin@example.com",
                            EmailVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 45, DateTimeKind.Utc).AddTicks(4676),
                            FirstName = "Company",
                            FullName = "Company Admin",
                            IsCompanyAdmin = true,
                            IsSystemAdmin = false,
                            IsTenantAdmin = false,
                            IsVerified = false,
                            LastName = "Admin",
                            Password = "AQAAAAEAACcQAAAAEEp1uDU46HZzyZr7KslSWo2VWBt/75lupK/e3ThKsH/JVF5qxNPIrTZTtF2OTmA0sQ==",
                            RoleId = 3,
                            Status = "Active",
                            TenantId = 1,
                            UserName = "companyadmin@example.com",
                            UserType = "BackOffice"
                        },
                        new
                        {
                            Id = 4,
                            AccountVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 55, DateTimeKind.Utc).AddTicks(4367),
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 55, DateTimeKind.Utc).AddTicks(4378),
                            Email = "customer01@example.com",
                            EmailVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 55, DateTimeKind.Utc).AddTicks(4351),
                            FirstName = "Customer",
                            FullName = "Customer 01",
                            IsCompanyAdmin = false,
                            IsSystemAdmin = false,
                            IsTenantAdmin = false,
                            IsVerified = false,
                            LastName = "01",
                            Password = "AQAAAAEAACcQAAAAEKu+86xHcpqc2lTsxd7zBB7tcPGIkp0NO8H8qUqCrAAfBXLGotzhuDIdrl8oTWESJA==",
                            RoleId = 4,
                            Status = "Active",
                            TenantId = 1,
                            UserName = "customer01@example.com",
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = 5,
                            AccountVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 65, DateTimeKind.Utc).AddTicks(1495),
                            CreatedAt = new DateTime(2022, 2, 5, 22, 7, 43, 65, DateTimeKind.Utc).AddTicks(1514),
                            Email = "customer02@example.com",
                            EmailVerifiedAt = new DateTime(2022, 2, 5, 22, 7, 43, 65, DateTimeKind.Utc).AddTicks(1478),
                            FirstName = "Customer",
                            FullName = "Customer 02",
                            IsCompanyAdmin = false,
                            IsSystemAdmin = false,
                            IsTenantAdmin = false,
                            IsVerified = false,
                            LastName = "02",
                            Password = "AQAAAAEAACcQAAAAEAeowycjtAEyUjO2qF/lg5wftQpHC1jKlV/MluHPi+w14ydeYCL+yH2TrBbRj4gHiw==",
                            RoleId = 4,
                            Status = "Active",
                            TenantId = 1,
                            UserName = "customer02@example.com",
                            UserType = "Customer"
                        });
                });

            modelBuilder.Entity("BMS.Entity.Security.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<DateTime>("ActivityAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ActivityDuration")
                        .HasColumnType("integer");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("CreatedByClient")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ReferenceUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RequestedData")
                        .HasColumnType("text");

                    b.Property<string>("ResponseData")
                        .HasColumnType("text");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserActivities", "security");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ClientConfiguration", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.HomePageImageOption", "HomePageImageOption")
                        .WithMany("ClientConfigurations")
                        .HasForeignKey("HomePageImageOptionId");

                    b.HasOne("BMS.Entity.Configuration.ImageType", "ImageType")
                        .WithMany("ClientConfigurations")
                        .HasForeignKey("ImageTypeId");

                    b.HasOne("BMS.Entity.Configuration.PhotoInstructionOption", "PhotoInstructionOption")
                        .WithMany("ClientConfigurations")
                        .HasForeignKey("PhotoInstructionOptionId");

                    b.HasOne("BMS.Entity.Configuration.PrioritizationOption", "PrioritizationOption")
                        .WithMany("ClientConfigurations")
                        .HasForeignKey("PrioritizationOptionId");

                    b.HasOne("BMS.Entity.Configuration.ProductRecommendationEngineOption", "ProductRecommendationEngine")
                        .WithMany("ProductRecommendationEngines")
                        .HasForeignKey("ProductRecommendationEngineId");

                    b.HasOne("BMS.Entity.Configuration.ResultsLayoutOption", "ResultsLayout")
                        .WithMany("ResultsLayouts")
                        .HasForeignKey("ResultsLayoutId");

                    b.Navigation("HomePageImageOption");

                    b.Navigation("ImageType");

                    b.Navigation("PhotoInstructionOption");

                    b.Navigation("PrioritizationOption");

                    b.Navigation("ProductRecommendationEngine");

                    b.Navigation("ResultsLayout");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ClientConfigurationDetail", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.ClientConfiguration", "Client")
                        .WithMany("ClientConfigurationDetails")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.Font", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.ClientConfiguration", "Client")
                        .WithMany("Fonts")
                        .HasForeignKey("ClientId");

                    b.HasOne("BMS.Entity.Configuration.FontType", "FontType")
                        .WithMany("Fonts")
                        .HasForeignKey("FontTypeId");

                    b.Navigation("Client");

                    b.Navigation("FontType");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.HomePageImage", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.ClientConfiguration", "Client")
                        .WithMany("HomePageImages")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PhotoInstruction", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.ClientConfiguration", "Client")
                        .WithMany("PhotoInstructions")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.SkinType", b =>
                {
                    b.HasOne("BMS.Entity.Configuration.ClientConfiguration", "Client")
                        .WithMany("SkinTypes")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationAuthorization", b =>
                {
                    b.HasOne("BMS.Entity.Security.ApplicationClient", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationToken", b =>
                {
                    b.HasOne("BMS.Entity.Security.ApplicationClient", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("BMS.Entity.Security.ApplicationAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("BMS.Entity.Security.ClientRole", b =>
                {
                    b.HasOne("BMS.Entity.Security.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("BMS.Entity.Security.Role", b =>
                {
                    b.HasOne("BMS.Entity.Security.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("BMS.Entity.Security.User", b =>
                {
                    b.HasOne("BMS.Entity.Security.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS.Entity.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("BMS.Entity.Security.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ClientConfiguration", b =>
                {
                    b.Navigation("ClientConfigurationDetails");

                    b.Navigation("Fonts");

                    b.Navigation("HomePageImages");

                    b.Navigation("PhotoInstructions");

                    b.Navigation("SkinTypes");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.FontType", b =>
                {
                    b.Navigation("Fonts");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.HomePageImageOption", b =>
                {
                    b.Navigation("ClientConfigurations");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ImageType", b =>
                {
                    b.Navigation("ClientConfigurations");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PhotoInstructionOption", b =>
                {
                    b.Navigation("ClientConfigurations");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.PrioritizationOption", b =>
                {
                    b.Navigation("ClientConfigurations");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ProductRecommendationEngineOption", b =>
                {
                    b.Navigation("ProductRecommendationEngines");
                });

            modelBuilder.Entity("BMS.Entity.Configuration.ResultsLayoutOption", b =>
                {
                    b.Navigation("ResultsLayouts");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("BMS.Entity.Security.ApplicationClient", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
